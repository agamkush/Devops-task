name: Build, Run, and Deploy

env: 
  AZURE_CONTAINER_REGISTRY: devops12.azurecr.io

on: 
  push: 
    branches: 
      - feature/g1-sso-service

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v3

      # Step 2: Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      
      # Step 3: Fetch latest tags and initialize version variables
    #   - name: "Fetch the latest tags"
    #     run: | 
    #       git fetch --tags
    #       LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
    #       echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

    #   - name: Parse the latest version
    #     run: |
    #       CURRENT_VERSION=${LATEST_TAG#v} # Remove the 'v' prefix
    #       MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
    #       MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
    #       PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

    #       echo "MAJOR=${MAJOR}" >> $GITHUB_ENV
    #       echo "MINOR=${MINOR}" >> $GITHUB_ENV
    #       echo "PATCH=${PATCH}" >> $GITHUB_ENV

    #   # Step 4: Determine increment type
    #   - name: Determine increment type
    #     run: |
    #       if git log -1 --pretty=%B | grep -iqE "\[MAJOR\]" ; then
    #         MAJOR=$((MAJOR + 1))
    #         MINOR=0
    #         PATCH=0
    #       elif git log -1 --pretty=%B | grep -iqE "\[MINOR\]" ; then
    #         MINOR=$((MINOR + 1))
    #         PATCH=0
    #       else
    #         PATCH=$((PATCH + 1))
    #       fi

    #       echo "MAJOR=${MAJOR}" >> $GITHUB_ENV
    #       echo "MINOR=${MINOR}" >> $GITHUB_ENV
    #       echo "PATCH=${PATCH}" >> $GITHUB_ENV

    #       NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
    #       echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
    #       echo "New version: $NEW_VERSION"
      - name: "Image versioning"
        run: |
            LATEST_TAG="${LATEST_TAG:-v0.0.0}"

            MAJOR=$(echo "$LATEST_TAG" | cut -d'v' -f2 | cut -d'.' -f1)
            MINOR=$(echo "$LATEST_TAG" | cut -d'.' -f2)
            PATCH=$(echo "$LATEST_TAG" | cut -d'.' -f3)

            COMMIT_MESSAGE=$(git log -1 --pretty=%B)

                if [[ "$COMMIT_MESSAGE" =~ \[MAJOR\] ]]; then
                          MAJOR=$((MAJOR + 1))
                          MINOR=0
                          PATCH=0 
                elif [[ "$COMMIT_MESSAGE" =~ \[MINOR\] ]]; then
                          MINOR=$((MINOR + 1))
                          PATCH=0
                else
                          PATCH=$((PATCH + 1))
                fi

                
                echo "MAJOR=${MAJOR}" >> "$GITHUB_ENV"
                echo "MINOR=${MINOR}" >> "$GITHUB_ENV"
                echo "PATCH=${PATCH}" >> "$GITHUB_ENV"

                NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                echo "NEW_VERSION=${NEW_VERSION}" >> "$GITHUB_ENV"
                echo "New version: $NEW_VERSION"

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/g1-sso-service:${{ env.NEW_VERSION }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}/g1-sso-service:latest


               
