name: Build, Run, and Deploy

env: 
  AZURE_CONTAINER_REGISTRY: devops12.azurecr.io

on: 
  push: 
    branches: feature/g1-sso-service

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v3

      # Step 2: Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      
      # Step 3: Image Versioning 
      - name: "Fetch the latest tags"
        run: | 
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v.0.0.0")
          echo "LATEST_TAG=${LATEST_TAG}" >> GITHUB_ENV

      - name: Determine increment type
        id: version_type
        run: |
          # Look for commit messages with [MAJOR], [MINOR], or [PATCH]
          if git log -1 --pretty=%B | grep -q "\[MAJOR\]" || git log -1 --pretty=%B | grep -q "\[major\]" || git log -1 --pretty=%B | grep -q "\[Major\]"; then
            echo "INCREMENT=major" >> $GITHUB_ENV
          elif git log -1 --pretty=%B | grep -q "\[MAJOR\]" || git log -1 --pretty=%B | grep -q "\[major\]" || git log -1 --pretty=%B | grep -q "\[Major\]"; then
            echo "INCREMENT=minor" >> $GITHUB_ENV
          else
            echo "INCREMENT=patch" >> $GITHUB_ENV
          fi

      - name: Increment version
        id: new_version
        run: |
            CURRENT_VERSION=${LATEST_TAG#v}
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
  
            case "${INCREMENT}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
  
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "NEW_VERSION=${NEW_VERSION} " >> $GITHUB_ENV
            echo "$GITHUB_ENV"
            echo "New version: $NEW_VERSION"
        
        
        
            
    #   # Step 4: Build the Docker image with version tagging
    #   - name: "Build the Docker Image"
    #     run: |
    #       docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/admin-console:${IMAGE_VERSION} .
    #       docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}/admin-console:${IMAGE_VERSION} ${{ env.AZURE_CONTAINER_REGISTRY }}/admin-console:latest

    #   # Step 5: Push the Docker image to Azure Container Registry
    #   - name: "Push the Docker Image"
    #     run: |
    #       docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/admin-console:${IMAGE_VERSION}
    #       docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/admin-console:latest

               
